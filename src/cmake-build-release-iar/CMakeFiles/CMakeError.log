Compiling the CXX compiler identification source file "CMakeCXXCompilerId.cpp" failed.
Compiler: C:/Program Files (x86)/IAR Systems/Embedded Workbench 8.3/arm/bin/iccarm.exe 
Build flags: 
Id flags:  

The output was:
2

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM

  # error "A C compiler has been selected for C++."
    ^
"C:\GitHub\RtosWrapper\cmake-build-release-iar\CMakeFiles\3.16.0\CompilerIdCXX\CMakeCXXCompilerId.cpp",5  Fatal error[Pe035]: 
          #error directive: "A C compiler has been selected for C++."
Fatal error detected, aborting.

Errors: 1
Warnings: none


Compiling the CXX compiler identification source file "CMakeCXXCompilerId.cpp" failed.
Compiler: C:/Program Files (x86)/IAR Systems/Embedded Workbench 8.3/arm/bin/iccarm.exe 
Build flags: 
Id flags: -c 

The output was:
2

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM

  # error "A C compiler has been selected for C++."
    ^
"C:\GitHub\RtosWrapper\cmake-build-release-iar\CMakeFiles\3.16.0\CompilerIdCXX\CMakeCXXCompilerId.cpp",5  Fatal error[Pe035]: 
          #error directive: "A C compiler has been selected for C++."
Fatal error detected, aborting.

Errors: 1
Warnings: none


Checking whether the ASM compiler is GNU using "--version" did not match "(GNU assembler)|(GCC)|(Free Software Foundation)":
IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
Checking whether the ASM compiler is Clang using "--version" did not match "(clang version)":
IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
Checking whether the ASM compiler is AppleClang using "--version" did not match "(Apple LLVM version)":
IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
Checking whether the ASM compiler is ARMClang using "--version" did not match "armclang":
IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
Checking whether the ASM compiler is HP using "-V" did not match "HP C":

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM
Command line error: Unexpected command line arguments:
            -V
Checking whether the ASM compiler is Intel using "--version" did not match "(ICC)":
IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
Checking whether the ASM compiler is SunPro using "-V" did not match "Sun C":

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM
Command line error: Unexpected command line arguments:
            -V
Checking whether the ASM compiler is XL using "-qversion" did not match "XL C":

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM
Command line error: Unexpected command line arguments:
            -qversion
Checking whether the ASM compiler is MSVC using "-?" did not match "Microsoft":

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM

Available command line options:
--aapcs {std|vfp} 
                Specify calling convention.
--aeabi         Generate aeabi compliant code 
--align_sp_on_irq 
                Generate code to align SP on entry to __irq functions
--arm           Generate code in arm mode, same as --cpu_mode arm
--c++           C++
--c89           Use C89 standard
--char_is_signed 
                'Plain' char is treated as signed char
--char_is_unsigned 
                'plain' char is treated as unsigned char
--cmse          Enable CMSE secure object generation
--cpu core      Specify target core
                Valid options are core names such as Cortex-M3
                and architecture names such as 7M
                Cortex-M3 is default
--cpu_mode {arm|a|thumb|t} 
                Select default mode for functions, arm is default
-D symbol[=value] 
                Define macro (same as #define symbol [value])
--debug
-r              Insert debug info in object file
--dependencies=[i|m|n][s][lw][b] file|directory|+ 
                List file dependencies
                   i     Include filename only (default)
                   m     Makefile style (multiple rules)
                   n     Makefile style (one rule)
                   s     Don't include system file dependencies
                   l     Use locale encoding instead of UTF-8
                   w     Use little endian UTF-16 instead of UTF-8
                   b     Use a Byte Order Mark in UTF-8 output
                (+: output same as -o, only with .d extension)
--deprecated_feature_warnings [+|-]feature,[+|-]feature,... 
                Enable (+) or disable (-) warnings about deprecated features:
                   attribute_syntax         Warn about attribute syntax that
                                            will change
                   preprocessor_extensions  Warn about use of migration
                                            preprocessor extensions
                   segment_pragmas          Warn about use of #pragma constseg/
                                            dataseg/memory
--diagnostics_tables file|directory 
                Dump diagnostic message tables to file
--diag_error tag,tag,... 
                Treat the list of tags as error diagnostics
--diag_remark tag,tag,... 
                Treat the list of tags as remark diagnostics
--diag_suppress tag,tag,... 
                Suppress the list of tags as diagnostics
--diag_warning tag,tag,... 
                Treat the list of tags as warning diagnostics
--discard_unused_publics 
                Discard unused public functions and variables
--dlib_config name|path 
                Specify DLib library configuration
--do_explicit_zero_opt_in_named_sections 
                Allow zero init optimization for variables in named
                sections/segments
-e              Enable IAR C/C++ language extensions
--enable_hardware_workaround waid[,waid[...]] 
                Generate hardware workaround for specified problem
--enable_restrict 
                Enable the restrict keyword
--endian {little|l|big|b} 
                Select byte order, little-endian is default
--enum_is_int   Force the size of all enumeration types to be at least 4 bytes
--error_limit limit 
                Stop after this many errors (0 = no limit)
-f file         Read command line options from file
--f file        Read command line options from file and report dependency
--fpu {VFPv2|VFPv3{_D16}{_FP16}|VFPv4{_sp}|VFP9-S|none} 
                Specify target FPU coprocessor support
                Default is none, which selects the software
                floating-point library.
--generate_entries_without_bounds 
                Generate functions for use from non-instrumented code
--guard_calls   Use a guard call for a function static initialization
--header_context 
                Adds include file context to diagnostics
-I directory    Add #include search directory
--ignore_uninstrumented_pointers 
                Disable checking of accesses via pointers from uninstrumented
                functions
-l[c|C|D|E|a|A|b|B][N][H] file|directory 
                Output list file
                   c     C source listing
                   C        with assembly code
                   D        with pure assembly code
                   E        with non-sequential assembly code
                   a     Assembler file
                   A        with C source
                   b     Basic assembler file
                   B        with C source
                   N     Do not include diagnostics
                   H     Include header file source lines
--lock_regs registers 
                Prevent compiler from using specified registers (R4-R11).
--macro_positions_in_diagnostics 
                Use positions inside macros in diagnostics
--make_all_definitions_weak 
                Make all variable and function definitions weak
--max_cost_constexpr_call limit 
                Maximum cost (number of calls/number of loop iterations) when
                evaluating a top-level constexpr call
--max_depth_constexpr_call limit 
                Maximum depth of recursion when evaluating a top-level
                constexpr call
--mfc           Enable multiple file compilation
--misrac1998[=arg,arg,...] 
                Enable MISRA-C 1998 diagnostics
                    all       Enable all rules
                    required  Enable all required rules
                    i         Enable rule i
                    i-j       Enable rule i through j
                    ~i        Disable rule i
                    ~i-j      Disable rule i through j
--misrac2004[=arg,arg,...] 
                Enable MISRA-C 2004 diagnostics
                    all       Enable all rules
                    required  Enable all required rules
                    X         Enable rule or chapter
                    X-Y       Enable range
                    ~X        Disable rule or chapter
                    ~X-Y      Disable range
                  where X and Y is one of:
                    i         All rules in chapter i
                    i.j       Rule i.j
--misrac_verbose 
                Enable verbose MISRA C messages
--nonportable_path_warnings 
                Enable warning for non-matching case in paths
--no_alignment_reduction 
                Disable alignment reduction of simple thumb functions
--no_bom        Don't use a Byte Order Mark in Unicode output
--no_call_frame_info 
                Suppress output of call frame information
--no_clustering Disable static clustering for static and global variables
--no_code_motion 
                Disable code motion
--no_const_align 
                Turn off the alignment optimization for constants
--no_cse        Disable common sub-expression elimination
--no_exceptions Disable C++ exception support
--no_fragments  Do not generate section fragments
--no_inline     Disable function inlining
--no_literal_pool 
                Generate code that does not issue read request to .text
--no_loop_align Disable alignment of labels in loops (Thumb2)
--no_mem_idioms Disable idiom recognition for memcpy/memset/memclr
--no_path_in_file_macros 
                Strip path from __FILE__ and __BASE_FILE__ macros
--no_rtti       Disable C++ runtime type information support
--no_rw_dynamic_init 
                Don't allow C-object to be initialized at runtime
--no_scheduling Disable instruction scheduling
--no_size_constraints 
                Remove limits for code expansion
--no_static_destruction 
                Do not emit code to destroy C++ static variables
--no_system_include 
                Do not search in the default system header directory
--no_tbaa       Disable type based alias analysis
--no_typedefs_in_diagnostics 
                Do not use typedefs when printing types
--no_unaligned_access 
                Don't generate unaligned accesses
--no_uniform_attribute_syntax 
                Use old meaning for IAR type attributes before initial type
--no_unroll     Disable loop unrolling
--no_var_align  Turn off the alignment optimization for variables
--no_warnings   Disable generation of warnings
--no_wrap_diagnostics 
                Don't wrap long lines in diagnostic messages
-O[n|l|m|h|hs|hz] 
                Select level of optimization:
                   n   No optimizations
                   l   Low optimizations (default)
                   m   Medium optimizations
                   h   High optimizations
                   hz  High optimizations, tuned for small code size
                   hs  High optimizations, tuned for high speed
                       (-O without argument) The same setting as -Oh
--only_stdout   Use stdout only (no console output on stderr)
--output file|path
-o file|path    Specify object file
--pending_instantiations limit 
                Maximum number of instantiations of a given template in
                progress at a time (0 -> no limit)
--predef_macros file|directory 
                Output predefined macros
--preinclude filename 
                Include file before normal source
--preprocess=[c][n][s] file|directory 
                Preprocessor output
                   c     Include comments
                   n     Preprocess only
                   s     Suppress #line directives
--public_equ symbol[=value] 
                Define public assembler symbol (EQU)
--relaxed_fp    Enable floating point optimizations that may affect the result
--remarks       Enable generation of remarks
--require_prototypes 
                Require prototypes for all called or public functions
--ropi          Generate read-only position independent code
--runtime_checking check,check,... 
                Instrument code to do runtime checks for the selected problems:
                   bounds              Check pointer bounds
                   bounds_no_checks    Track pointer bounds, but emit no checks
                   div_by_zero         Check division by zero
                   implicit_integer_conversion
                                       Check only implicit integer conversion
                   integer_conversion  Check any integer conversion
                   signed_overflow     Check for signed integer overflow
                   signed_shift        Check for overflow in signed shift
                   switch              Check for unhandled cases in switch
                                       statements
                   unsigned_overflow   Check for unsigned integer overflow
                   unsigned_shift      Check for overflow in unsigned shift
--rwpi          Generate read-write position independent code
--rwpi_near     Generate read-write position independent code
--section section-name=new section-name 
                Rename section
--silent        Silent operation
--source_encoding {locale|utf8} 
                Encoding to use for source files with no BOM
--stack_protection 
                Insert stack smash protection
--strict        Strict C/C++ standard language rules
--system_include_dir directory 
                Set system header directory
--text_out encoding 
                Encoding to use for text output files
                   utf8                UTF-8
                   utf16le             Little-endian UTF-16
                   utf16be             Big-endian UTF-16
                   locale              Locale specific encoding
--thumb         Generate code in thumb mode, same as --cpu_mode thumb
--uniform_attribute_syntax 
                Same syntax for IAR type attributes as for const/volatile
--use_c++_inline 
                Use C++ inline semantics in C mode
--use_paths_as_written 
                Use paths as written in debug information
                (normally absolute paths are used)
--use_unix_directory_separators 
                Use forward slashes in paths in debug information
--utf8_text_in  Non-source text input files with no BOM use UTF-8 encoding
--vectorize     Perform autovectorization
--version       Output version information and exit
--vla           Allow variable length arrays
--warnings_affect_exit_code 
                Warnings affect exit code
--warnings_are_errors 
                All warnings are errors
--warn_about_c_style_casts 
                Warn about uses of C-style casts in EC++/C++
Checking whether the ASM compiler is TI using "-h" did not match "Texas Instruments":

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM
Command line error: Unexpected command line arguments:
            -h
Checking whether the ASM compiler is IAR using "" did not match "IAR Assembler":

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM

Available command line options:
--aapcs {std|vfp} 
                Specify calling convention.
--aeabi         Generate aeabi compliant code 
--align_sp_on_irq 
                Generate code to align SP on entry to __irq functions
--arm           Generate code in arm mode, same as --cpu_mode arm
--c++           C++
--c89           Use C89 standard
--char_is_signed 
                'Plain' char is treated as signed char
--char_is_unsigned 
                'plain' char is treated as unsigned char
--cmse          Enable CMSE secure object generation
--cpu core      Specify target core
                Valid options are core names such as Cortex-M3
                and architecture names such as 7M
                Cortex-M3 is default
--cpu_mode {arm|a|thumb|t} 
                Select default mode for functions, arm is default
-D symbol[=value] 
                Define macro (same as #define symbol [value])
--debug
-r              Insert debug info in object file
--dependencies=[i|m|n][s][lw][b] file|directory|+ 
                List file dependencies
                   i     Include filename only (default)
                   m     Makefile style (multiple rules)
                   n     Makefile style (one rule)
                   s     Don't include system file dependencies
                   l     Use locale encoding instead of UTF-8
                   w     Use little endian UTF-16 instead of UTF-8
                   b     Use a Byte Order Mark in UTF-8 output
                (+: output same as -o, only with .d extension)
--deprecated_feature_warnings [+|-]feature,[+|-]feature,... 
                Enable (+) or disable (-) warnings about deprecated features:
                   attribute_syntax         Warn about attribute syntax that
                                            will change
                   preprocessor_extensions  Warn about use of migration
                                            preprocessor extensions
                   segment_pragmas          Warn about use of #pragma constseg/
                                            dataseg/memory
--diagnostics_tables file|directory 
                Dump diagnostic message tables to file
--diag_error tag,tag,... 
                Treat the list of tags as error diagnostics
--diag_remark tag,tag,... 
                Treat the list of tags as remark diagnostics
--diag_suppress tag,tag,... 
                Suppress the list of tags as diagnostics
--diag_warning tag,tag,... 
                Treat the list of tags as warning diagnostics
--discard_unused_publics 
                Discard unused public functions and variables
--dlib_config name|path 
                Specify DLib library configuration
--do_explicit_zero_opt_in_named_sections 
                Allow zero init optimization for variables in named
                sections/segments
-e              Enable IAR C/C++ language extensions
--enable_hardware_workaround waid[,waid[...]] 
                Generate hardware workaround for specified problem
--enable_restrict 
                Enable the restrict keyword
--endian {little|l|big|b} 
                Select byte order, little-endian is default
--enum_is_int   Force the size of all enumeration types to be at least 4 bytes
--error_limit limit 
                Stop after this many errors (0 = no limit)
-f file         Read command line options from file
--f file        Read command line options from file and report dependency
--fpu {VFPv2|VFPv3{_D16}{_FP16}|VFPv4{_sp}|VFP9-S|none} 
                Specify target FPU coprocessor support
                Default is none, which selects the software
                floating-point library.
--generate_entries_without_bounds 
                Generate functions for use from non-instrumented code
--guard_calls   Use a guard call for a function static initialization
--header_context 
                Adds include file context to diagnostics
-I directory    Add #include search directory
--ignore_uninstrumented_pointers 
                Disable checking of accesses via pointers from uninstrumented
                functions
-l[c|C|D|E|a|A|b|B][N][H] file|directory 
                Output list file
                   c     C source listing
                   C        with assembly code
                   D        with pure assembly code
                   E        with non-sequential assembly code
                   a     Assembler file
                   A        with C source
                   b     Basic assembler file
                   B        with C source
                   N     Do not include diagnostics
                   H     Include header file source lines
--lock_regs registers 
                Prevent compiler from using specified registers (R4-R11).
--macro_positions_in_diagnostics 
                Use positions inside macros in diagnostics
--make_all_definitions_weak 
                Make all variable and function definitions weak
--max_cost_constexpr_call limit 
                Maximum cost (number of calls/number of loop iterations) when
                evaluating a top-level constexpr call
--max_depth_constexpr_call limit 
                Maximum depth of recursion when evaluating a top-level
                constexpr call
--mfc           Enable multiple file compilation
--misrac1998[=arg,arg,...] 
                Enable MISRA-C 1998 diagnostics
                    all       Enable all rules
                    required  Enable all required rules
                    i         Enable rule i
                    i-j       Enable rule i through j
                    ~i        Disable rule i
                    ~i-j      Disable rule i through j
--misrac2004[=arg,arg,...] 
                Enable MISRA-C 2004 diagnostics
                    all       Enable all rules
                    required  Enable all required rules
                    X         Enable rule or chapter
                    X-Y       Enable range
                    ~X        Disable rule or chapter
                    ~X-Y      Disable range
                  where X and Y is one of:
                    i         All rules in chapter i
                    i.j       Rule i.j
--misrac_verbose 
                Enable verbose MISRA C messages
--nonportable_path_warnings 
                Enable warning for non-matching case in paths
--no_alignment_reduction 
                Disable alignment reduction of simple thumb functions
--no_bom        Don't use a Byte Order Mark in Unicode output
--no_call_frame_info 
                Suppress output of call frame information
--no_clustering Disable static clustering for static and global variables
--no_code_motion 
                Disable code motion
--no_const_align 
                Turn off the alignment optimization for constants
--no_cse        Disable common sub-expression elimination
--no_exceptions Disable C++ exception support
--no_fragments  Do not generate section fragments
--no_inline     Disable function inlining
--no_literal_pool 
                Generate code that does not issue read request to .text
--no_loop_align Disable alignment of labels in loops (Thumb2)
--no_mem_idioms Disable idiom recognition for memcpy/memset/memclr
--no_path_in_file_macros 
                Strip path from __FILE__ and __BASE_FILE__ macros
--no_rtti       Disable C++ runtime type information support
--no_rw_dynamic_init 
                Don't allow C-object to be initialized at runtime
--no_scheduling Disable instruction scheduling
--no_size_constraints 
                Remove limits for code expansion
--no_static_destruction 
                Do not emit code to destroy C++ static variables
--no_system_include 
                Do not search in the default system header directory
--no_tbaa       Disable type based alias analysis
--no_typedefs_in_diagnostics 
                Do not use typedefs when printing types
--no_unaligned_access 
                Don't generate unaligned accesses
--no_uniform_attribute_syntax 
                Use old meaning for IAR type attributes before initial type
--no_unroll     Disable loop unrolling
--no_var_align  Turn off the alignment optimization for variables
--no_warnings   Disable generation of warnings
--no_wrap_diagnostics 
                Don't wrap long lines in diagnostic messages
-O[n|l|m|h|hs|hz] 
                Select level of optimization:
                   n   No optimizations
                   l   Low optimizations (default)
                   m   Medium optimizations
                   h   High optimizations
                   hz  High optimizations, tuned for small code size
                   hs  High optimizations, tuned for high speed
                       (-O without argument) The same setting as -Oh
--only_stdout   Use stdout only (no console output on stderr)
--output file|path
-o file|path    Specify object file
--pending_instantiations limit 
                Maximum number of instantiations of a given template in
                progress at a time (0 -> no limit)
--predef_macros file|directory 
                Output predefined macros
--preinclude filename 
                Include file before normal source
--preprocess=[c][n][s] file|directory 
                Preprocessor output
                   c     Include comments
                   n     Preprocess only
                   s     Suppress #line directives
--public_equ symbol[=value] 
                Define public assembler symbol (EQU)
--relaxed_fp    Enable floating point optimizations that may affect the result
--remarks       Enable generation of remarks
--require_prototypes 
                Require prototypes for all called or public functions
--ropi          Generate read-only position independent code
--runtime_checking check,check,... 
                Instrument code to do runtime checks for the selected problems:
                   bounds              Check pointer bounds
                   bounds_no_checks    Track pointer bounds, but emit no checks
                   div_by_zero         Check division by zero
                   implicit_integer_conversion
                                       Check only implicit integer conversion
                   integer_conversion  Check any integer conversion
                   signed_overflow     Check for signed integer overflow
                   signed_shift        Check for overflow in signed shift
                   switch              Check for unhandled cases in switch
                                       statements
                   unsigned_overflow   Check for unsigned integer overflow
                   unsigned_shift      Check for overflow in unsigned shift
--rwpi          Generate read-write position independent code
--rwpi_near     Generate read-write position independent code
--section section-name=new section-name 
                Rename section
--silent        Silent operation
--source_encoding {locale|utf8} 
                Encoding to use for source files with no BOM
--stack_protection 
                Insert stack smash protection
--strict        Strict C/C++ standard language rules
--system_include_dir directory 
                Set system header directory
--text_out encoding 
                Encoding to use for text output files
                   utf8                UTF-8
                   utf16le             Little-endian UTF-16
                   utf16be             Big-endian UTF-16
                   locale              Locale specific encoding
--thumb         Generate code in thumb mode, same as --cpu_mode thumb
--uniform_attribute_syntax 
                Same syntax for IAR type attributes as for const/volatile
--use_c++_inline 
                Use C++ inline semantics in C mode
--use_paths_as_written 
                Use paths as written in debug information
                (normally absolute paths are used)
--use_unix_directory_separators 
                Use forward slashes in paths in debug information
--utf8_text_in  Non-source text input files with no BOM use UTF-8 encoding
--vectorize     Perform autovectorization
--version       Output version information and exit
--vla           Allow variable length arrays
--warnings_affect_exit_code 
                Warnings affect exit code
--warnings_are_errors 
                All warnings are errors
--warn_about_c_style_casts 
                Warn about uses of C-style casts in EC++/C++
Checking whether the ASM compiler is ARMCC using "" did not match "(ARM Compiler)|(ARM Assembler)":

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM

Available command line options:
--aapcs {std|vfp} 
                Specify calling convention.
--aeabi         Generate aeabi compliant code 
--align_sp_on_irq 
                Generate code to align SP on entry to __irq functions
--arm           Generate code in arm mode, same as --cpu_mode arm
--c++           C++
--c89           Use C89 standard
--char_is_signed 
                'Plain' char is treated as signed char
--char_is_unsigned 
                'plain' char is treated as unsigned char
--cmse          Enable CMSE secure object generation
--cpu core      Specify target core
                Valid options are core names such as Cortex-M3
                and architecture names such as 7M
                Cortex-M3 is default
--cpu_mode {arm|a|thumb|t} 
                Select default mode for functions, arm is default
-D symbol[=value] 
                Define macro (same as #define symbol [value])
--debug
-r              Insert debug info in object file
--dependencies=[i|m|n][s][lw][b] file|directory|+ 
                List file dependencies
                   i     Include filename only (default)
                   m     Makefile style (multiple rules)
                   n     Makefile style (one rule)
                   s     Don't include system file dependencies
                   l     Use locale encoding instead of UTF-8
                   w     Use little endian UTF-16 instead of UTF-8
                   b     Use a Byte Order Mark in UTF-8 output
                (+: output same as -o, only with .d extension)
--deprecated_feature_warnings [+|-]feature,[+|-]feature,... 
                Enable (+) or disable (-) warnings about deprecated features:
                   attribute_syntax         Warn about attribute syntax that
                                            will change
                   preprocessor_extensions  Warn about use of migration
                                            preprocessor extensions
                   segment_pragmas          Warn about use of #pragma constseg/
                                            dataseg/memory
--diagnostics_tables file|directory 
                Dump diagnostic message tables to file
--diag_error tag,tag,... 
                Treat the list of tags as error diagnostics
--diag_remark tag,tag,... 
                Treat the list of tags as remark diagnostics
--diag_suppress tag,tag,... 
                Suppress the list of tags as diagnostics
--diag_warning tag,tag,... 
                Treat the list of tags as warning diagnostics
--discard_unused_publics 
                Discard unused public functions and variables
--dlib_config name|path 
                Specify DLib library configuration
--do_explicit_zero_opt_in_named_sections 
                Allow zero init optimization for variables in named
                sections/segments
-e              Enable IAR C/C++ language extensions
--enable_hardware_workaround waid[,waid[...]] 
                Generate hardware workaround for specified problem
--enable_restrict 
                Enable the restrict keyword
--endian {little|l|big|b} 
                Select byte order, little-endian is default
--enum_is_int   Force the size of all enumeration types to be at least 4 bytes
--error_limit limit 
                Stop after this many errors (0 = no limit)
-f file         Read command line options from file
--f file        Read command line options from file and report dependency
--fpu {VFPv2|VFPv3{_D16}{_FP16}|VFPv4{_sp}|VFP9-S|none} 
                Specify target FPU coprocessor support
                Default is none, which selects the software
                floating-point library.
--generate_entries_without_bounds 
                Generate functions for use from non-instrumented code
--guard_calls   Use a guard call for a function static initialization
--header_context 
                Adds include file context to diagnostics
-I directory    Add #include search directory
--ignore_uninstrumented_pointers 
                Disable checking of accesses via pointers from uninstrumented
                functions
-l[c|C|D|E|a|A|b|B][N][H] file|directory 
                Output list file
                   c     C source listing
                   C        with assembly code
                   D        with pure assembly code
                   E        with non-sequential assembly code
                   a     Assembler file
                   A        with C source
                   b     Basic assembler file
                   B        with C source
                   N     Do not include diagnostics
                   H     Include header file source lines
--lock_regs registers 
                Prevent compiler from using specified registers (R4-R11).
--macro_positions_in_diagnostics 
                Use positions inside macros in diagnostics
--make_all_definitions_weak 
                Make all variable and function definitions weak
--max_cost_constexpr_call limit 
                Maximum cost (number of calls/number of loop iterations) when
                evaluating a top-level constexpr call
--max_depth_constexpr_call limit 
                Maximum depth of recursion when evaluating a top-level
                constexpr call
--mfc           Enable multiple file compilation
--misrac1998[=arg,arg,...] 
                Enable MISRA-C 1998 diagnostics
                    all       Enable all rules
                    required  Enable all required rules
                    i         Enable rule i
                    i-j       Enable rule i through j
                    ~i        Disable rule i
                    ~i-j      Disable rule i through j
--misrac2004[=arg,arg,...] 
                Enable MISRA-C 2004 diagnostics
                    all       Enable all rules
                    required  Enable all required rules
                    X         Enable rule or chapter
                    X-Y       Enable range
                    ~X        Disable rule or chapter
                    ~X-Y      Disable range
                  where X and Y is one of:
                    i         All rules in chapter i
                    i.j       Rule i.j
--misrac_verbose 
                Enable verbose MISRA C messages
--nonportable_path_warnings 
                Enable warning for non-matching case in paths
--no_alignment_reduction 
                Disable alignment reduction of simple thumb functions
--no_bom        Don't use a Byte Order Mark in Unicode output
--no_call_frame_info 
                Suppress output of call frame information
--no_clustering Disable static clustering for static and global variables
--no_code_motion 
                Disable code motion
--no_const_align 
                Turn off the alignment optimization for constants
--no_cse        Disable common sub-expression elimination
--no_exceptions Disable C++ exception support
--no_fragments  Do not generate section fragments
--no_inline     Disable function inlining
--no_literal_pool 
                Generate code that does not issue read request to .text
--no_loop_align Disable alignment of labels in loops (Thumb2)
--no_mem_idioms Disable idiom recognition for memcpy/memset/memclr
--no_path_in_file_macros 
                Strip path from __FILE__ and __BASE_FILE__ macros
--no_rtti       Disable C++ runtime type information support
--no_rw_dynamic_init 
                Don't allow C-object to be initialized at runtime
--no_scheduling Disable instruction scheduling
--no_size_constraints 
                Remove limits for code expansion
--no_static_destruction 
                Do not emit code to destroy C++ static variables
--no_system_include 
                Do not search in the default system header directory
--no_tbaa       Disable type based alias analysis
--no_typedefs_in_diagnostics 
                Do not use typedefs when printing types
--no_unaligned_access 
                Don't generate unaligned accesses
--no_uniform_attribute_syntax 
                Use old meaning for IAR type attributes before initial type
--no_unroll     Disable loop unrolling
--no_var_align  Turn off the alignment optimization for variables
--no_warnings   Disable generation of warnings
--no_wrap_diagnostics 
                Don't wrap long lines in diagnostic messages
-O[n|l|m|h|hs|hz] 
                Select level of optimization:
                   n   No optimizations
                   l   Low optimizations (default)
                   m   Medium optimizations
                   h   High optimizations
                   hz  High optimizations, tuned for small code size
                   hs  High optimizations, tuned for high speed
                       (-O without argument) The same setting as -Oh
--only_stdout   Use stdout only (no console output on stderr)
--output file|path
-o file|path    Specify object file
--pending_instantiations limit 
                Maximum number of instantiations of a given template in
                progress at a time (0 -> no limit)
--predef_macros file|directory 
                Output predefined macros
--preinclude filename 
                Include file before normal source
--preprocess=[c][n][s] file|directory 
                Preprocessor output
                   c     Include comments
                   n     Preprocess only
                   s     Suppress #line directives
--public_equ symbol[=value] 
                Define public assembler symbol (EQU)
--relaxed_fp    Enable floating point optimizations that may affect the result
--remarks       Enable generation of remarks
--require_prototypes 
                Require prototypes for all called or public functions
--ropi          Generate read-only position independent code
--runtime_checking check,check,... 
                Instrument code to do runtime checks for the selected problems:
                   bounds              Check pointer bounds
                   bounds_no_checks    Track pointer bounds, but emit no checks
                   div_by_zero         Check division by zero
                   implicit_integer_conversion
                                       Check only implicit integer conversion
                   integer_conversion  Check any integer conversion
                   signed_overflow     Check for signed integer overflow
                   signed_shift        Check for overflow in signed shift
                   switch              Check for unhandled cases in switch
                                       statements
                   unsigned_overflow   Check for unsigned integer overflow
                   unsigned_shift      Check for overflow in unsigned shift
--rwpi          Generate read-write position independent code
--rwpi_near     Generate read-write position independent code
--section section-name=new section-name 
                Rename section
--silent        Silent operation
--source_encoding {locale|utf8} 
                Encoding to use for source files with no BOM
--stack_protection 
                Insert stack smash protection
--strict        Strict C/C++ standard language rules
--system_include_dir directory 
                Set system header directory
--text_out encoding 
                Encoding to use for text output files
                   utf8                UTF-8
                   utf16le             Little-endian UTF-16
                   utf16be             Big-endian UTF-16
                   locale              Locale specific encoding
--thumb         Generate code in thumb mode, same as --cpu_mode thumb
--uniform_attribute_syntax 
                Same syntax for IAR type attributes as for const/volatile
--use_c++_inline 
                Use C++ inline semantics in C mode
--use_paths_as_written 
                Use paths as written in debug information
                (normally absolute paths are used)
--use_unix_directory_separators 
                Use forward slashes in paths in debug information
--utf8_text_in  Non-source text input files with no BOM use UTF-8 encoding
--vectorize     Perform autovectorization
--version       Output version information and exit
--vla           Allow variable length arrays
--warnings_affect_exit_code 
                Warnings affect exit code
--warnings_are_errors 
                All warnings are errors
--warn_about_c_style_casts 
                Warn about uses of C-style casts in EC++/C++
Checking whether the ASM compiler is NASM using "-v" did not match "(NASM version)":

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM
Command line error: Unexpected command line arguments:
            -v
Checking whether the ASM compiler is YASM using "--version" did not match "(yasm)":
IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
Checking whether the ASM compiler is ADSP using "-version" did not match "Analog Devices":

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM
Command line error: Unexpected command line arguments:
            -version
Checking whether the ASM compiler is QCC using "-V" did not match "gcc_nto":

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM
Command line error: Unexpected command line arguments:
            -V
Checking whether the ASM compiler is GNU using "--version" did not match "(GNU assembler)|(GCC)|(Free Software Foundation)":
IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
Checking whether the ASM compiler is Clang using "--version" did not match "(clang version)":
IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
Checking whether the ASM compiler is AppleClang using "--version" did not match "(Apple LLVM version)":
IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
Checking whether the ASM compiler is ARMClang using "--version" did not match "armclang":
IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
Checking whether the ASM compiler is HP using "-V" did not match "HP C":

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM
Command line error: Unexpected command line arguments:
            -V
Checking whether the ASM compiler is Intel using "--version" did not match "(ICC)":
IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
Checking whether the ASM compiler is SunPro using "-V" did not match "Sun C":

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM
Command line error: Unexpected command line arguments:
            -V
Checking whether the ASM compiler is XL using "-qversion" did not match "XL C":

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM
Command line error: Unexpected command line arguments:
            -qversion
Checking whether the ASM compiler is MSVC using "-?" did not match "Microsoft":

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM

Available command line options:
--aapcs {std|vfp} 
                Specify calling convention.
--aeabi         Generate aeabi compliant code 
--align_sp_on_irq 
                Generate code to align SP on entry to __irq functions
--arm           Generate code in arm mode, same as --cpu_mode arm
--c++           C++
--c89           Use C89 standard
--char_is_signed 
                'Plain' char is treated as signed char
--char_is_unsigned 
                'plain' char is treated as unsigned char
--cmse          Enable CMSE secure object generation
--cpu core      Specify target core
                Valid options are core names such as Cortex-M3
                and architecture names such as 7M
                Cortex-M3 is default
--cpu_mode {arm|a|thumb|t} 
                Select default mode for functions, arm is default
-D symbol[=value] 
                Define macro (same as #define symbol [value])
--debug
-r              Insert debug info in object file
--dependencies=[i|m|n][s][lw][b] file|directory|+ 
                List file dependencies
                   i     Include filename only (default)
                   m     Makefile style (multiple rules)
                   n     Makefile style (one rule)
                   s     Don't include system file dependencies
                   l     Use locale encoding instead of UTF-8
                   w     Use little endian UTF-16 instead of UTF-8
                   b     Use a Byte Order Mark in UTF-8 output
                (+: output same as -o, only with .d extension)
--deprecated_feature_warnings [+|-]feature,[+|-]feature,... 
                Enable (+) or disable (-) warnings about deprecated features:
                   attribute_syntax         Warn about attribute syntax that
                                            will change
                   preprocessor_extensions  Warn about use of migration
                                            preprocessor extensions
                   segment_pragmas          Warn about use of #pragma constseg/
                                            dataseg/memory
--diagnostics_tables file|directory 
                Dump diagnostic message tables to file
--diag_error tag,tag,... 
                Treat the list of tags as error diagnostics
--diag_remark tag,tag,... 
                Treat the list of tags as remark diagnostics
--diag_suppress tag,tag,... 
                Suppress the list of tags as diagnostics
--diag_warning tag,tag,... 
                Treat the list of tags as warning diagnostics
--discard_unused_publics 
                Discard unused public functions and variables
--dlib_config name|path 
                Specify DLib library configuration
--do_explicit_zero_opt_in_named_sections 
                Allow zero init optimization for variables in named
                sections/segments
-e              Enable IAR C/C++ language extensions
--enable_hardware_workaround waid[,waid[...]] 
                Generate hardware workaround for specified problem
--enable_restrict 
                Enable the restrict keyword
--endian {little|l|big|b} 
                Select byte order, little-endian is default
--enum_is_int   Force the size of all enumeration types to be at least 4 bytes
--error_limit limit 
                Stop after this many errors (0 = no limit)
-f file         Read command line options from file
--f file        Read command line options from file and report dependency
--fpu {VFPv2|VFPv3{_D16}{_FP16}|VFPv4{_sp}|VFP9-S|none} 
                Specify target FPU coprocessor support
                Default is none, which selects the software
                floating-point library.
--generate_entries_without_bounds 
                Generate functions for use from non-instrumented code
--guard_calls   Use a guard call for a function static initialization
--header_context 
                Adds include file context to diagnostics
-I directory    Add #include search directory
--ignore_uninstrumented_pointers 
                Disable checking of accesses via pointers from uninstrumented
                functions
-l[c|C|D|E|a|A|b|B][N][H] file|directory 
                Output list file
                   c     C source listing
                   C        with assembly code
                   D        with pure assembly code
                   E        with non-sequential assembly code
                   a     Assembler file
                   A        with C source
                   b     Basic assembler file
                   B        with C source
                   N     Do not include diagnostics
                   H     Include header file source lines
--lock_regs registers 
                Prevent compiler from using specified registers (R4-R11).
--macro_positions_in_diagnostics 
                Use positions inside macros in diagnostics
--make_all_definitions_weak 
                Make all variable and function definitions weak
--max_cost_constexpr_call limit 
                Maximum cost (number of calls/number of loop iterations) when
                evaluating a top-level constexpr call
--max_depth_constexpr_call limit 
                Maximum depth of recursion when evaluating a top-level
                constexpr call
--mfc           Enable multiple file compilation
--misrac1998[=arg,arg,...] 
                Enable MISRA-C 1998 diagnostics
                    all       Enable all rules
                    required  Enable all required rules
                    i         Enable rule i
                    i-j       Enable rule i through j
                    ~i        Disable rule i
                    ~i-j      Disable rule i through j
--misrac2004[=arg,arg,...] 
                Enable MISRA-C 2004 diagnostics
                    all       Enable all rules
                    required  Enable all required rules
                    X         Enable rule or chapter
                    X-Y       Enable range
                    ~X        Disable rule or chapter
                    ~X-Y      Disable range
                  where X and Y is one of:
                    i         All rules in chapter i
                    i.j       Rule i.j
--misrac_verbose 
                Enable verbose MISRA C messages
--nonportable_path_warnings 
                Enable warning for non-matching case in paths
--no_alignment_reduction 
                Disable alignment reduction of simple thumb functions
--no_bom        Don't use a Byte Order Mark in Unicode output
--no_call_frame_info 
                Suppress output of call frame information
--no_clustering Disable static clustering for static and global variables
--no_code_motion 
                Disable code motion
--no_const_align 
                Turn off the alignment optimization for constants
--no_cse        Disable common sub-expression elimination
--no_exceptions Disable C++ exception support
--no_fragments  Do not generate section fragments
--no_inline     Disable function inlining
--no_literal_pool 
                Generate code that does not issue read request to .text
--no_loop_align Disable alignment of labels in loops (Thumb2)
--no_mem_idioms Disable idiom recognition for memcpy/memset/memclr
--no_path_in_file_macros 
                Strip path from __FILE__ and __BASE_FILE__ macros
--no_rtti       Disable C++ runtime type information support
--no_rw_dynamic_init 
                Don't allow C-object to be initialized at runtime
--no_scheduling Disable instruction scheduling
--no_size_constraints 
                Remove limits for code expansion
--no_static_destruction 
                Do not emit code to destroy C++ static variables
--no_system_include 
                Do not search in the default system header directory
--no_tbaa       Disable type based alias analysis
--no_typedefs_in_diagnostics 
                Do not use typedefs when printing types
--no_unaligned_access 
                Don't generate unaligned accesses
--no_uniform_attribute_syntax 
                Use old meaning for IAR type attributes before initial type
--no_unroll     Disable loop unrolling
--no_var_align  Turn off the alignment optimization for variables
--no_warnings   Disable generation of warnings
--no_wrap_diagnostics 
                Don't wrap long lines in diagnostic messages
-O[n|l|m|h|hs|hz] 
                Select level of optimization:
                   n   No optimizations
                   l   Low optimizations (default)
                   m   Medium optimizations
                   h   High optimizations
                   hz  High optimizations, tuned for small code size
                   hs  High optimizations, tuned for high speed
                       (-O without argument) The same setting as -Oh
--only_stdout   Use stdout only (no console output on stderr)
--output file|path
-o file|path    Specify object file
--pending_instantiations limit 
                Maximum number of instantiations of a given template in
                progress at a time (0 -> no limit)
--predef_macros file|directory 
                Output predefined macros
--preinclude filename 
                Include file before normal source
--preprocess=[c][n][s] file|directory 
                Preprocessor output
                   c     Include comments
                   n     Preprocess only
                   s     Suppress #line directives
--public_equ symbol[=value] 
                Define public assembler symbol (EQU)
--relaxed_fp    Enable floating point optimizations that may affect the result
--remarks       Enable generation of remarks
--require_prototypes 
                Require prototypes for all called or public functions
--ropi          Generate read-only position independent code
--runtime_checking check,check,... 
                Instrument code to do runtime checks for the selected problems:
                   bounds              Check pointer bounds
                   bounds_no_checks    Track pointer bounds, but emit no checks
                   div_by_zero         Check division by zero
                   implicit_integer_conversion
                                       Check only implicit integer conversion
                   integer_conversion  Check any integer conversion
                   signed_overflow     Check for signed integer overflow
                   signed_shift        Check for overflow in signed shift
                   switch              Check for unhandled cases in switch
                                       statements
                   unsigned_overflow   Check for unsigned integer overflow
                   unsigned_shift      Check for overflow in unsigned shift
--rwpi          Generate read-write position independent code
--rwpi_near     Generate read-write position independent code
--section section-name=new section-name 
                Rename section
--silent        Silent operation
--source_encoding {locale|utf8} 
                Encoding to use for source files with no BOM
--stack_protection 
                Insert stack smash protection
--strict        Strict C/C++ standard language rules
--system_include_dir directory 
                Set system header directory
--text_out encoding 
                Encoding to use for text output files
                   utf8                UTF-8
                   utf16le             Little-endian UTF-16
                   utf16be             Big-endian UTF-16
                   locale              Locale specific encoding
--thumb         Generate code in thumb mode, same as --cpu_mode thumb
--uniform_attribute_syntax 
                Same syntax for IAR type attributes as for const/volatile
--use_c++_inline 
                Use C++ inline semantics in C mode
--use_paths_as_written 
                Use paths as written in debug information
                (normally absolute paths are used)
--use_unix_directory_separators 
                Use forward slashes in paths in debug information
--utf8_text_in  Non-source text input files with no BOM use UTF-8 encoding
--vectorize     Perform autovectorization
--version       Output version information and exit
--vla           Allow variable length arrays
--warnings_affect_exit_code 
                Warnings affect exit code
--warnings_are_errors 
                All warnings are errors
--warn_about_c_style_casts 
                Warn about uses of C-style casts in EC++/C++
Checking whether the ASM compiler is TI using "-h" did not match "Texas Instruments":

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM
Command line error: Unexpected command line arguments:
            -h
Checking whether the ASM compiler is IAR using "" did not match "IAR Assembler":

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM

Available command line options:
--aapcs {std|vfp} 
                Specify calling convention.
--aeabi         Generate aeabi compliant code 
--align_sp_on_irq 
                Generate code to align SP on entry to __irq functions
--arm           Generate code in arm mode, same as --cpu_mode arm
--c++           C++
--c89           Use C89 standard
--char_is_signed 
                'Plain' char is treated as signed char
--char_is_unsigned 
                'plain' char is treated as unsigned char
--cmse          Enable CMSE secure object generation
--cpu core      Specify target core
                Valid options are core names such as Cortex-M3
                and architecture names such as 7M
                Cortex-M3 is default
--cpu_mode {arm|a|thumb|t} 
                Select default mode for functions, arm is default
-D symbol[=value] 
                Define macro (same as #define symbol [value])
--debug
-r              Insert debug info in object file
--dependencies=[i|m|n][s][lw][b] file|directory|+ 
                List file dependencies
                   i     Include filename only (default)
                   m     Makefile style (multiple rules)
                   n     Makefile style (one rule)
                   s     Don't include system file dependencies
                   l     Use locale encoding instead of UTF-8
                   w     Use little endian UTF-16 instead of UTF-8
                   b     Use a Byte Order Mark in UTF-8 output
                (+: output same as -o, only with .d extension)
--deprecated_feature_warnings [+|-]feature,[+|-]feature,... 
                Enable (+) or disable (-) warnings about deprecated features:
                   attribute_syntax         Warn about attribute syntax that
                                            will change
                   preprocessor_extensions  Warn about use of migration
                                            preprocessor extensions
                   segment_pragmas          Warn about use of #pragma constseg/
                                            dataseg/memory
--diagnostics_tables file|directory 
                Dump diagnostic message tables to file
--diag_error tag,tag,... 
                Treat the list of tags as error diagnostics
--diag_remark tag,tag,... 
                Treat the list of tags as remark diagnostics
--diag_suppress tag,tag,... 
                Suppress the list of tags as diagnostics
--diag_warning tag,tag,... 
                Treat the list of tags as warning diagnostics
--discard_unused_publics 
                Discard unused public functions and variables
--dlib_config name|path 
                Specify DLib library configuration
--do_explicit_zero_opt_in_named_sections 
                Allow zero init optimization for variables in named
                sections/segments
-e              Enable IAR C/C++ language extensions
--enable_hardware_workaround waid[,waid[...]] 
                Generate hardware workaround for specified problem
--enable_restrict 
                Enable the restrict keyword
--endian {little|l|big|b} 
                Select byte order, little-endian is default
--enum_is_int   Force the size of all enumeration types to be at least 4 bytes
--error_limit limit 
                Stop after this many errors (0 = no limit)
-f file         Read command line options from file
--f file        Read command line options from file and report dependency
--fpu {VFPv2|VFPv3{_D16}{_FP16}|VFPv4{_sp}|VFP9-S|none} 
                Specify target FPU coprocessor support
                Default is none, which selects the software
                floating-point library.
--generate_entries_without_bounds 
                Generate functions for use from non-instrumented code
--guard_calls   Use a guard call for a function static initialization
--header_context 
                Adds include file context to diagnostics
-I directory    Add #include search directory
--ignore_uninstrumented_pointers 
                Disable checking of accesses via pointers from uninstrumented
                functions
-l[c|C|D|E|a|A|b|B][N][H] file|directory 
                Output list file
                   c     C source listing
                   C        with assembly code
                   D        with pure assembly code
                   E        with non-sequential assembly code
                   a     Assembler file
                   A        with C source
                   b     Basic assembler file
                   B        with C source
                   N     Do not include diagnostics
                   H     Include header file source lines
--lock_regs registers 
                Prevent compiler from using specified registers (R4-R11).
--macro_positions_in_diagnostics 
                Use positions inside macros in diagnostics
--make_all_definitions_weak 
                Make all variable and function definitions weak
--max_cost_constexpr_call limit 
                Maximum cost (number of calls/number of loop iterations) when
                evaluating a top-level constexpr call
--max_depth_constexpr_call limit 
                Maximum depth of recursion when evaluating a top-level
                constexpr call
--mfc           Enable multiple file compilation
--misrac1998[=arg,arg,...] 
                Enable MISRA-C 1998 diagnostics
                    all       Enable all rules
                    required  Enable all required rules
                    i         Enable rule i
                    i-j       Enable rule i through j
                    ~i        Disable rule i
                    ~i-j      Disable rule i through j
--misrac2004[=arg,arg,...] 
                Enable MISRA-C 2004 diagnostics
                    all       Enable all rules
                    required  Enable all required rules
                    X         Enable rule or chapter
                    X-Y       Enable range
                    ~X        Disable rule or chapter
                    ~X-Y      Disable range
                  where X and Y is one of:
                    i         All rules in chapter i
                    i.j       Rule i.j
--misrac_verbose 
                Enable verbose MISRA C messages
--nonportable_path_warnings 
                Enable warning for non-matching case in paths
--no_alignment_reduction 
                Disable alignment reduction of simple thumb functions
--no_bom        Don't use a Byte Order Mark in Unicode output
--no_call_frame_info 
                Suppress output of call frame information
--no_clustering Disable static clustering for static and global variables
--no_code_motion 
                Disable code motion
--no_const_align 
                Turn off the alignment optimization for constants
--no_cse        Disable common sub-expression elimination
--no_exceptions Disable C++ exception support
--no_fragments  Do not generate section fragments
--no_inline     Disable function inlining
--no_literal_pool 
                Generate code that does not issue read request to .text
--no_loop_align Disable alignment of labels in loops (Thumb2)
--no_mem_idioms Disable idiom recognition for memcpy/memset/memclr
--no_path_in_file_macros 
                Strip path from __FILE__ and __BASE_FILE__ macros
--no_rtti       Disable C++ runtime type information support
--no_rw_dynamic_init 
                Don't allow C-object to be initialized at runtime
--no_scheduling Disable instruction scheduling
--no_size_constraints 
                Remove limits for code expansion
--no_static_destruction 
                Do not emit code to destroy C++ static variables
--no_system_include 
                Do not search in the default system header directory
--no_tbaa       Disable type based alias analysis
--no_typedefs_in_diagnostics 
                Do not use typedefs when printing types
--no_unaligned_access 
                Don't generate unaligned accesses
--no_uniform_attribute_syntax 
                Use old meaning for IAR type attributes before initial type
--no_unroll     Disable loop unrolling
--no_var_align  Turn off the alignment optimization for variables
--no_warnings   Disable generation of warnings
--no_wrap_diagnostics 
                Don't wrap long lines in diagnostic messages
-O[n|l|m|h|hs|hz] 
                Select level of optimization:
                   n   No optimizations
                   l   Low optimizations (default)
                   m   Medium optimizations
                   h   High optimizations
                   hz  High optimizations, tuned for small code size
                   hs  High optimizations, tuned for high speed
                       (-O without argument) The same setting as -Oh
--only_stdout   Use stdout only (no console output on stderr)
--output file|path
-o file|path    Specify object file
--pending_instantiations limit 
                Maximum number of instantiations of a given template in
                progress at a time (0 -> no limit)
--predef_macros file|directory 
                Output predefined macros
--preinclude filename 
                Include file before normal source
--preprocess=[c][n][s] file|directory 
                Preprocessor output
                   c     Include comments
                   n     Preprocess only
                   s     Suppress #line directives
--public_equ symbol[=value] 
                Define public assembler symbol (EQU)
--relaxed_fp    Enable floating point optimizations that may affect the result
--remarks       Enable generation of remarks
--require_prototypes 
                Require prototypes for all called or public functions
--ropi          Generate read-only position independent code
--runtime_checking check,check,... 
                Instrument code to do runtime checks for the selected problems:
                   bounds              Check pointer bounds
                   bounds_no_checks    Track pointer bounds, but emit no checks
                   div_by_zero         Check division by zero
                   implicit_integer_conversion
                                       Check only implicit integer conversion
                   integer_conversion  Check any integer conversion
                   signed_overflow     Check for signed integer overflow
                   signed_shift        Check for overflow in signed shift
                   switch              Check for unhandled cases in switch
                                       statements
                   unsigned_overflow   Check for unsigned integer overflow
                   unsigned_shift      Check for overflow in unsigned shift
--rwpi          Generate read-write position independent code
--rwpi_near     Generate read-write position independent code
--section section-name=new section-name 
                Rename section
--silent        Silent operation
--source_encoding {locale|utf8} 
                Encoding to use for source files with no BOM
--stack_protection 
                Insert stack smash protection
--strict        Strict C/C++ standard language rules
--system_include_dir directory 
                Set system header directory
--text_out encoding 
                Encoding to use for text output files
                   utf8                UTF-8
                   utf16le             Little-endian UTF-16
                   utf16be             Big-endian UTF-16
                   locale              Locale specific encoding
--thumb         Generate code in thumb mode, same as --cpu_mode thumb
--uniform_attribute_syntax 
                Same syntax for IAR type attributes as for const/volatile
--use_c++_inline 
                Use C++ inline semantics in C mode
--use_paths_as_written 
                Use paths as written in debug information
                (normally absolute paths are used)
--use_unix_directory_separators 
                Use forward slashes in paths in debug information
--utf8_text_in  Non-source text input files with no BOM use UTF-8 encoding
--vectorize     Perform autovectorization
--version       Output version information and exit
--vla           Allow variable length arrays
--warnings_affect_exit_code 
                Warnings affect exit code
--warnings_are_errors 
                All warnings are errors
--warn_about_c_style_casts 
                Warn about uses of C-style casts in EC++/C++
Checking whether the ASM compiler is ARMCC using "" did not match "(ARM Compiler)|(ARM Assembler)":

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM

Available command line options:
--aapcs {std|vfp} 
                Specify calling convention.
--aeabi         Generate aeabi compliant code 
--align_sp_on_irq 
                Generate code to align SP on entry to __irq functions
--arm           Generate code in arm mode, same as --cpu_mode arm
--c++           C++
--c89           Use C89 standard
--char_is_signed 
                'Plain' char is treated as signed char
--char_is_unsigned 
                'plain' char is treated as unsigned char
--cmse          Enable CMSE secure object generation
--cpu core      Specify target core
                Valid options are core names such as Cortex-M3
                and architecture names such as 7M
                Cortex-M3 is default
--cpu_mode {arm|a|thumb|t} 
                Select default mode for functions, arm is default
-D symbol[=value] 
                Define macro (same as #define symbol [value])
--debug
-r              Insert debug info in object file
--dependencies=[i|m|n][s][lw][b] file|directory|+ 
                List file dependencies
                   i     Include filename only (default)
                   m     Makefile style (multiple rules)
                   n     Makefile style (one rule)
                   s     Don't include system file dependencies
                   l     Use locale encoding instead of UTF-8
                   w     Use little endian UTF-16 instead of UTF-8
                   b     Use a Byte Order Mark in UTF-8 output
                (+: output same as -o, only with .d extension)
--deprecated_feature_warnings [+|-]feature,[+|-]feature,... 
                Enable (+) or disable (-) warnings about deprecated features:
                   attribute_syntax         Warn about attribute syntax that
                                            will change
                   preprocessor_extensions  Warn about use of migration
                                            preprocessor extensions
                   segment_pragmas          Warn about use of #pragma constseg/
                                            dataseg/memory
--diagnostics_tables file|directory 
                Dump diagnostic message tables to file
--diag_error tag,tag,... 
                Treat the list of tags as error diagnostics
--diag_remark tag,tag,... 
                Treat the list of tags as remark diagnostics
--diag_suppress tag,tag,... 
                Suppress the list of tags as diagnostics
--diag_warning tag,tag,... 
                Treat the list of tags as warning diagnostics
--discard_unused_publics 
                Discard unused public functions and variables
--dlib_config name|path 
                Specify DLib library configuration
--do_explicit_zero_opt_in_named_sections 
                Allow zero init optimization for variables in named
                sections/segments
-e              Enable IAR C/C++ language extensions
--enable_hardware_workaround waid[,waid[...]] 
                Generate hardware workaround for specified problem
--enable_restrict 
                Enable the restrict keyword
--endian {little|l|big|b} 
                Select byte order, little-endian is default
--enum_is_int   Force the size of all enumeration types to be at least 4 bytes
--error_limit limit 
                Stop after this many errors (0 = no limit)
-f file         Read command line options from file
--f file        Read command line options from file and report dependency
--fpu {VFPv2|VFPv3{_D16}{_FP16}|VFPv4{_sp}|VFP9-S|none} 
                Specify target FPU coprocessor support
                Default is none, which selects the software
                floating-point library.
--generate_entries_without_bounds 
                Generate functions for use from non-instrumented code
--guard_calls   Use a guard call for a function static initialization
--header_context 
                Adds include file context to diagnostics
-I directory    Add #include search directory
--ignore_uninstrumented_pointers 
                Disable checking of accesses via pointers from uninstrumented
                functions
-l[c|C|D|E|a|A|b|B][N][H] file|directory 
                Output list file
                   c     C source listing
                   C        with assembly code
                   D        with pure assembly code
                   E        with non-sequential assembly code
                   a     Assembler file
                   A        with C source
                   b     Basic assembler file
                   B        with C source
                   N     Do not include diagnostics
                   H     Include header file source lines
--lock_regs registers 
                Prevent compiler from using specified registers (R4-R11).
--macro_positions_in_diagnostics 
                Use positions inside macros in diagnostics
--make_all_definitions_weak 
                Make all variable and function definitions weak
--max_cost_constexpr_call limit 
                Maximum cost (number of calls/number of loop iterations) when
                evaluating a top-level constexpr call
--max_depth_constexpr_call limit 
                Maximum depth of recursion when evaluating a top-level
                constexpr call
--mfc           Enable multiple file compilation
--misrac1998[=arg,arg,...] 
                Enable MISRA-C 1998 diagnostics
                    all       Enable all rules
                    required  Enable all required rules
                    i         Enable rule i
                    i-j       Enable rule i through j
                    ~i        Disable rule i
                    ~i-j      Disable rule i through j
--misrac2004[=arg,arg,...] 
                Enable MISRA-C 2004 diagnostics
                    all       Enable all rules
                    required  Enable all required rules
                    X         Enable rule or chapter
                    X-Y       Enable range
                    ~X        Disable rule or chapter
                    ~X-Y      Disable range
                  where X and Y is one of:
                    i         All rules in chapter i
                    i.j       Rule i.j
--misrac_verbose 
                Enable verbose MISRA C messages
--nonportable_path_warnings 
                Enable warning for non-matching case in paths
--no_alignment_reduction 
                Disable alignment reduction of simple thumb functions
--no_bom        Don't use a Byte Order Mark in Unicode output
--no_call_frame_info 
                Suppress output of call frame information
--no_clustering Disable static clustering for static and global variables
--no_code_motion 
                Disable code motion
--no_const_align 
                Turn off the alignment optimization for constants
--no_cse        Disable common sub-expression elimination
--no_exceptions Disable C++ exception support
--no_fragments  Do not generate section fragments
--no_inline     Disable function inlining
--no_literal_pool 
                Generate code that does not issue read request to .text
--no_loop_align Disable alignment of labels in loops (Thumb2)
--no_mem_idioms Disable idiom recognition for memcpy/memset/memclr
--no_path_in_file_macros 
                Strip path from __FILE__ and __BASE_FILE__ macros
--no_rtti       Disable C++ runtime type information support
--no_rw_dynamic_init 
                Don't allow C-object to be initialized at runtime
--no_scheduling Disable instruction scheduling
--no_size_constraints 
                Remove limits for code expansion
--no_static_destruction 
                Do not emit code to destroy C++ static variables
--no_system_include 
                Do not search in the default system header directory
--no_tbaa       Disable type based alias analysis
--no_typedefs_in_diagnostics 
                Do not use typedefs when printing types
--no_unaligned_access 
                Don't generate unaligned accesses
--no_uniform_attribute_syntax 
                Use old meaning for IAR type attributes before initial type
--no_unroll     Disable loop unrolling
--no_var_align  Turn off the alignment optimization for variables
--no_warnings   Disable generation of warnings
--no_wrap_diagnostics 
                Don't wrap long lines in diagnostic messages
-O[n|l|m|h|hs|hz] 
                Select level of optimization:
                   n   No optimizations
                   l   Low optimizations (default)
                   m   Medium optimizations
                   h   High optimizations
                   hz  High optimizations, tuned for small code size
                   hs  High optimizations, tuned for high speed
                       (-O without argument) The same setting as -Oh
--only_stdout   Use stdout only (no console output on stderr)
--output file|path
-o file|path    Specify object file
--pending_instantiations limit 
                Maximum number of instantiations of a given template in
                progress at a time (0 -> no limit)
--predef_macros file|directory 
                Output predefined macros
--preinclude filename 
                Include file before normal source
--preprocess=[c][n][s] file|directory 
                Preprocessor output
                   c     Include comments
                   n     Preprocess only
                   s     Suppress #line directives
--public_equ symbol[=value] 
                Define public assembler symbol (EQU)
--relaxed_fp    Enable floating point optimizations that may affect the result
--remarks       Enable generation of remarks
--require_prototypes 
                Require prototypes for all called or public functions
--ropi          Generate read-only position independent code
--runtime_checking check,check,... 
                Instrument code to do runtime checks for the selected problems:
                   bounds              Check pointer bounds
                   bounds_no_checks    Track pointer bounds, but emit no checks
                   div_by_zero         Check division by zero
                   implicit_integer_conversion
                                       Check only implicit integer conversion
                   integer_conversion  Check any integer conversion
                   signed_overflow     Check for signed integer overflow
                   signed_shift        Check for overflow in signed shift
                   switch              Check for unhandled cases in switch
                                       statements
                   unsigned_overflow   Check for unsigned integer overflow
                   unsigned_shift      Check for overflow in unsigned shift
--rwpi          Generate read-write position independent code
--rwpi_near     Generate read-write position independent code
--section section-name=new section-name 
                Rename section
--silent        Silent operation
--source_encoding {locale|utf8} 
                Encoding to use for source files with no BOM
--stack_protection 
                Insert stack smash protection
--strict        Strict C/C++ standard language rules
--system_include_dir directory 
                Set system header directory
--text_out encoding 
                Encoding to use for text output files
                   utf8                UTF-8
                   utf16le             Little-endian UTF-16
                   utf16be             Big-endian UTF-16
                   locale              Locale specific encoding
--thumb         Generate code in thumb mode, same as --cpu_mode thumb
--uniform_attribute_syntax 
                Same syntax for IAR type attributes as for const/volatile
--use_c++_inline 
                Use C++ inline semantics in C mode
--use_paths_as_written 
                Use paths as written in debug information
                (normally absolute paths are used)
--use_unix_directory_separators 
                Use forward slashes in paths in debug information
--utf8_text_in  Non-source text input files with no BOM use UTF-8 encoding
--vectorize     Perform autovectorization
--version       Output version information and exit
--vla           Allow variable length arrays
--warnings_affect_exit_code 
                Warnings affect exit code
--warnings_are_errors 
                All warnings are errors
--warn_about_c_style_casts 
                Warn about uses of C-style casts in EC++/C++
Checking whether the ASM compiler is NASM using "-v" did not match "(NASM version)":

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM
Command line error: Unexpected command line arguments:
            -v
Checking whether the ASM compiler is YASM using "--version" did not match "(yasm)":
IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
Checking whether the ASM compiler is ADSP using "-version" did not match "Analog Devices":

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM
Command line error: Unexpected command line arguments:
            -version
Checking whether the ASM compiler is QCC using "-V" did not match "gcc_nto":

   IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM
   Copyright 1999-2019 IAR Systems AB.
   PC-locked license - IAR Embedded Workbench for ARM
Command line error: Unexpected command line arguments:
            -V
